# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new_month_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Эту страницу НЕЛЬЗЯ перезаписывать

from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
import main_menu_logo_rc


class Ui_NewMonthWindow(object):
    def setupUi(self, NewMonthWindow):
        NewMonthWindow.setObjectName("NewMonthWindow")
        NewMonthWindow.resize(800, 870)
        NewMonthWindow.setStyleSheet("background-color: rgb(238, 237, 240);")
        self.tips_label = QtWidgets.QLabel(NewMonthWindow)
        self.tips_label.setGeometry(QtCore.QRect(30, 740, 490, 100))
        self.tips_label.setStyleSheet("font: 10pt \"Involve\";\n"
"color: rgb(34, 34, 59);")
        self.tips_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.tips_label.setWordWrap(True)
        self.tips_label.setObjectName("tips_label")
        self.save_month = QtWidgets.QPushButton(NewMonthWindow)
        self.save_month.setGeometry(QtCore.QRect(560, 740, 201, 40))
        self.save_month.setStyleSheet("border-radius: 15px;\n"
"font: 14pt \"Involve\";\n"
"border-color: rgb(34, 34, 59);\n"
"color: rgb(255, 180, 162);\n"
"background-color: rgb(34, 34, 59);")
        self.save_month.setObjectName("save_month")
        self.logo_icon = QtWidgets.QLabel(NewMonthWindow)
        self.logo_icon.setGeometry(QtCore.QRect(30, 30, 50, 50))
        self.logo_icon.setObjectName("logo_icon")
        self.logo = QtWidgets.QLabel(NewMonthWindow)
        self.logo.setGeometry(QtCore.QRect(90, 30, 240, 50))
        self.logo.setObjectName("logo")
        self.accounts_table = QtWidgets.QTableWidget(NewMonthWindow)
        self.accounts_table.setGeometry(QtCore.QRect(80, 260, 640, 450))
        self.accounts_table.setStyleSheet("border-radius: 15px;\n"
"font: 14pt \"Involve\";\n"
"color: rgb(34, 34, 59);\n"
"background-color: rgb(255, 255, 255);")
        self.accounts_table.setObjectName("accounts_table")
        self.accounts_table.setColumnCount(0)
        self.accounts_table.setRowCount(0)
        self.error_label = QtWidgets.QLabel(NewMonthWindow)
        self.error_label.setGeometry(QtCore.QRect(150, 630, 500, 50))
        self.error_label.setStyleSheet("font: 12pt \"Involve\";\n"
"color: rgb(181, 131, 141);\n"
"background-color: rgb(255, 255, 255);")
        self.error_label.setText("")
        self.error_label.setAlignment(QtCore.Qt.AlignCenter)
        self.error_label.setWordWrap(True)
        self.error_label.setObjectName("error_label")
        self.back_button = QtWidgets.QPushButton(NewMonthWindow)
        self.back_button.setGeometry(QtCore.QRect(560, 800, 201, 40))
        self.back_button.setStyleSheet("border-radius: 15px;\n"
"font: 14pt \"Involve\";\n"
"border-color: rgb(34, 34, 59);\n"
"color: rgb(255, 180, 162);\n"
"background-color: rgb(34, 34, 59);")
        self.back_button.setObjectName("back_button")
        self.label = QtWidgets.QLabel(NewMonthWindow)
        self.label.setGeometry(QtCore.QRect(0, 200, 800, 30))
        self.label.setStyleSheet("font: 16pt \"Involve\";\n"
"color: rgb(34, 34, 59);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(NewMonthWindow)
        self.label_2.setGeometry(QtCore.QRect(0, 110, 800, 30))
        self.label_2.setStyleSheet("font: 16pt \"Involve\";\n"
"color: rgb(34, 34, 59);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(NewMonthWindow)
        self.lineEdit.setGeometry(QtCore.QRect(240, 150, 120, 30))
        self.lineEdit.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"font: 14pt \"Involve\";")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(NewMonthWindow)
        self.lineEdit_2.setGeometry(QtCore.QRect(400, 150, 160, 30))
        self.lineEdit_2.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"font: 14pt \"Involve\";")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.comboBox_year = QtWidgets.QComboBox(NewMonthWindow)
        self.comboBox_year.setGeometry(QtCore.QRect(250, 154, 101, 22))
        self.comboBox_year.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"font: 14pt \"Involve\";")
        self.comboBox_year.setEditable(True)
        self.comboBox_year.setObjectName("comboBox_year")
        self.comboBox_month = QtWidgets.QComboBox(NewMonthWindow)
        self.comboBox_month.setGeometry(QtCore.QRect(410, 154, 141, 22))
        self.comboBox_month.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"font: 14pt \"Involve\";")
        self.comboBox_month.setEditable(True)
        self.comboBox_month.setObjectName("comboBox_month")

        # Динамическое заполнение combobox
        self.fill_combobox()

        self.retranslateUi(NewMonthWindow)
        QtCore.QMetaObject.connectSlotsByName(NewMonthWindow)

    # Метод для автоматического заполнения текущего года и месяца для пользователя
    def fill_combobox(self):
        current_year = datetime.now().year
        current_month = datetime.now().month

        # Добавляем года для возможности выбора
        for year in range(current_year - 5, current_year + 6):
            self.comboBox_year.addItem(str(year))

        # По дефолту ставим текущий год для пользователя
        self.comboBox_year.setCurrentText(str(current_year))

        # Справочник месяцев
        months = [
            "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь",
            "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"
        ]

        # Добавляем справочник для вариантов
        self.comboBox_month.addItems(months)

        # Устанавливаем текущий месяц
        self.comboBox_month.setCurrentIndex(current_month - 1)

    def retranslateUi(self, NewMonthWindow):
        _translate = QtCore.QCoreApplication.translate
        NewMonthWindow.setWindowTitle(_translate("NewMonthWindow", "BudgetKeeper"))
        self.tips_label.setText(_translate("NewMonthWindow", "<html><head/><body><p><span style=\" color:#22223b;\">*Наименование счёта - это имя счёта, которое ты задал </span></p><p><span style=\" color:#22223b;\">*Сумма денежных средств, руб. - количество денежных средств на счёте</span></p><p><span style=\" color:#22223b;\">При выходе данные не сохраняются</span></p></body></html>"))
        self.save_month.setText(_translate("NewMonthWindow", "Сохранить"))
        self.logo_icon.setText(_translate("NewMonthWindow", "<html><head/><body><p><img src=\":/icons/logo_icon_50x50.png\"/></p></body></html>"))
        self.logo.setText(_translate("NewMonthWindow", "<html><head/><body><p><img src=\":/logo/app_name_horizontal_350x50.png\"/></p></body></html>"))
        self.back_button.setText(_translate("NewMonthWindow", "Назад"))
        self.label.setText(_translate("NewMonthWindow", "<html><head/><body><p>Ниже запиши <span style=\" font-weight:600; color:#e5989b;\">суммы</span> по твоим счетам на конец месяца</p></body></html>"))
        self.label_2.setText(_translate("NewMonthWindow", "<html><head/><body><p><span style=\" color:#22223b;\">Выбери </span><span style=\" font-weight:600; color:#e5989b;\">период</span> сохранения</p></body></html>"))
        self.lineEdit.setPlaceholderText(_translate("NewMonthWindow", " год"))
        self.lineEdit_2.setPlaceholderText(_translate("NewMonthWindow", " месяц"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    NewMonthWindow = QtWidgets.QWidget()
    ui = Ui_NewMonthWindow()
    ui.setupUi(NewMonthWindow)
    NewMonthWindow.show()
    sys.exit(app.exec_())
