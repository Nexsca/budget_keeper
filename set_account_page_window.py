# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'set_account_page_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Эту страницу НЕЛЬЗЯ перезаписывать

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QSpacerItem, QSizePolicy
import main_menu_logo_rc
import logging

logging.basicConfig(
    filename='app.log',            # Имя файла для записи логов
    level=logging.INFO,            # Уровень логирования (INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(levelname)s - %(message)s',  # Формат сообщений
    datefmt="%Y-%m-%d %H:%M:%S"  # Формат даты и времени
)
logger = logging.getLogger("BudgetAppLogger") # Файл лога для обращения в коде


class Ui_SetAccountPage(object):
    def setupUi(self, SetAccountPage):
        SetAccountPage.setObjectName("SetAccountPage")
        SetAccountPage.resize(1100, 900)
        SetAccountPage.setStyleSheet("background-color: rgb(238, 237, 240);")

        self.scrollArea = QtWidgets.QScrollArea(SetAccountPage)
        self.scrollArea.setGeometry(QtCore.QRect(150, 270, 800, 500))
        self.scrollArea.setStyleSheet("border-color: rgb(255, 255, 255);\n"
                                      "border-radius: 15px;\n"
                                      "background-color: rgb(255, 255, 255);")
        self.scrollArea.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        self.scroll_widget = QtWidgets.QWidget()
        self.scroll_widget.setGeometry(QtCore.QRect(0, 0, 800, 500))
        self.scroll_widget.setStyleSheet("border-radius: 15px;\n"
                                         "background-color: rgb(255, 255, 255);")
        self.scroll_widget.setObjectName("scroll_widget")

        self.scroll_layout = QtWidgets.QVBoxLayout(self.scroll_widget)
        self.scrollArea.setWidget(self.scroll_widget)

        self.logo = QtWidgets.QLabel(SetAccountPage)
        self.logo.setGeometry(QtCore.QRect(90, 40, 240, 50))
        self.logo.setObjectName("logo")

        self.amount_accounts = QtWidgets.QSpinBox(SetAccountPage)
        self.amount_accounts.setGeometry(QtCore.QRect(330, 130, 60, 40))
        self.amount_accounts.setStyleSheet("font: 14pt \"Involve\";\n"
                                           "color: rgb(34, 34, 59);")
        self.amount_accounts.setMinimum(1)
        self.amount_accounts.setMaximum(10)
        self.amount_accounts.setObjectName("amount_accounts")

        self.logo_icon = QtWidgets.QLabel(SetAccountPage)
        self.logo_icon.setGeometry(QtCore.QRect(40, 40, 50, 50))
        self.logo_icon.setObjectName("logo_icon")

        self.create_button = QtWidgets.QPushButton(SetAccountPage)
        self.create_button.setGeometry(QtCore.QRect(40, 190, 140, 40))
        self.create_button.setStyleSheet("border-radius: 15px;\n"
                                         "font: 14pt \"Involve\";\n"
                                         "background-color: rgb(34, 34, 59);\n"
                                         "color: rgb(229, 152, 155);")
        self.create_button.setObjectName("create_button")

        self.label_amount_accounts = QtWidgets.QLabel(SetAccountPage)
        self.label_amount_accounts.setGeometry(QtCore.QRect(40, 130, 280, 40))
        self.label_amount_accounts.setStyleSheet("font: 14pt \"Involve\";\n"
                                                 "color: rgb(34, 34, 59);")
        self.label_amount_accounts.setObjectName("label_amount_accounts")

        self.save_button = QtWidgets.QPushButton(SetAccountPage)
        self.save_button.setGeometry(QtCore.QRect(40, 820, 140, 40))
        self.save_button.setStyleSheet("border-radius: 15px;\n"
                                       "font: 14pt \"Involve\";\n"
                                       "background-color: rgb(34, 34, 59);\n"
                                       "color: rgb(229, 152, 155);")
        self.save_button.setObjectName("save_button")

        self.retranslateUi(SetAccountPage)
        QtCore.QMetaObject.connectSlotsByName(SetAccountPage)

        self.error_label = QtWidgets.QLabel(SetAccountPage)
        self.error_label.setGeometry(QtCore.QRect(200, 810, 860, 60))
        self.error_label.setStyleSheet("font: 12pt \"Involve\";\n"
                                       "color: rgb(181, 131, 141);")
        self.error_label.setText("")
        self.error_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.error_label.setWordWrap(True)
        self.error_label.setObjectName("error_label")

        self.account_forms = []  # Список для хранения данных о созданных формах

        # Connect button to generate forms
        self.create_button.clicked.connect(self.generate_account_forms)

    def retranslateUi(self, SetAccountPage):
        _translate = QtCore.QCoreApplication.translate
        SetAccountPage.setWindowTitle(_translate("SetAccountPage", "BudgetKeeper"))
        self.logo.setText(_translate("SetAccountPage",
                                     "<html><head/><body><p><img src=\":/logo/app_name_horizontal_350x50.png\"/></p></body></html>"))
        self.logo_icon.setText(_translate("SetAccountPage",
                                          "<html><head/><body><p><img src=\":/icons/logo_icon_50x50.png\"/></p></body></html>"))
        self.create_button.setText(_translate("SetAccountPage", "Создать"))
        self.label_amount_accounts.setText(_translate("SetAccountPage", "Установи количество счетов:"))
        self.save_button.setText(_translate("SetAccountPage", "Сохранить"))

    def generate_account_forms(self):
        """Generates account forms dynamically based on the selected number of accounts."""
        # Clear previous forms
        logger.info(f"Выполняется очистка форм для заполнения счетов пользователя")
        for i in reversed(range(self.scroll_layout.count())):
            widget_to_remove = self.scroll_layout.itemAt(i).widget()
            if widget_to_remove:
                widget_to_remove.deleteLater()

        self.account_forms.clear()

        # Generate forms
        num_accounts = self.amount_accounts.value()
        logger.info(f"Выполняется генерация форм для заполнения данных о счетах пользователя, "
                    f"количество: '{num_accounts}'")
        for i in range(num_accounts):
            form_widget = QtWidgets.QWidget()
            form_layout = QtWidgets.QHBoxLayout(form_widget)

            # Account Name Input
            account_name_label = QtWidgets.QLabel(f"Счёт №{i + 1}:")
            account_name_label.setStyleSheet("font: 12pt \"Involve\";\n"
                                             "color: rgb(34, 34, 59);")
            account_name_input = QtWidgets.QLineEdit()
            account_name_input.setStyleSheet("border-radius: 15px;\n"
                                             "background-color: rgb(242, 233, 228);\n"
                                             "font: 12pt \"Involve\";\n"
                                             "color: rgb(34, 34, 59)")
            account_name_input.setPlaceholderText(" наименование счёта")
            account_name_input.setFixedHeight(30)
            account_name_input.setFixedWidth(390)

            # Account Type Dropdown
            account_type_label = QtWidgets.QLabel("Тип счёта:")
            account_type_label.setStyleSheet("font: 12pt \"Involve\";\n"
                                             "color: rgb(34, 34, 59);")
            account_type_dropdown = QtWidgets.QComboBox()
            account_type_dropdown.setStyleSheet("font: 12pt \"Involve\";\n"
                                                "color: rgb(34, 34, 59);\n"
                                                "background-color: rgb(242, 233, 228);\n"
                                                "border-radius: 15px;")
            account_type_dropdown.addItems(
                ["Карточный счёт", "Текущий счёт", "Резервный счёт", "Накопительный счёт", "Вклад", "Валютный счёт",
                 "Займ"])
            account_type_dropdown.setFixedHeight(30)
            account_type_dropdown.setFixedWidth(200)

            # Add widgets to the form layout
            form_layout.addWidget(account_name_label)
            form_layout.addWidget(account_name_input)
            form_layout.addWidget(account_type_label)
            form_layout.addWidget(account_type_dropdown)

            # Зададим вручную спэйсер
            spacer = QSpacerItem(20, 0, QSizePolicy.Expanding, QSizePolicy.Minimum)
            form_layout.addItem(spacer)

            # Add form to the scroll layout
            self.scroll_layout.addWidget(form_widget)

            self.account_forms.append({
                "name_input": account_name_input,
                "type_dropdown": account_type_dropdown
            })


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SetAccountPage = QtWidgets.QWidget()
    ui = Ui_SetAccountPage()
    ui.setupUi(SetAccountPage)
    SetAccountPage.show()
    sys.exit(app.exec_())
